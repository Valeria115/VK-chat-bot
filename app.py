import os
import logging
from dotenv import load_dotenv
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from db import is_vke_related, is_list_request
from text_utils import correct_spelling
from ai_gigachat import ask_gigachat


from db import (
    init_db,
    update_if_needed,
    search_knowledge,
    get_top_context,
    generate_help_link,
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
VK_API_TOKEN = os.getenv("VK_API_TOKEN")
VK_GROUP_ID = os.getenv("VK_GROUP_ID")


class VkBot:
    def __init__(self):
        self.vk_session = vk_api.VkApi(token=VK_API_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, group_id=VK_GROUP_ID)
        self.vk = self.vk_session.get_api()

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        init_db()
        update_if_needed()

    def send_message(self, user_id, message):
        self.vk.messages.send(
            user_id=user_id,
            message=message,
            random_id=vk_api.utils.get_random_id(),
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}")

    def handle_message(self, event):
        try:
            message = event.object
            user_id = message["from_id"]
            text = message["text"].strip().lower()

            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

            if text in ["/start", "–Ω–∞—á–∞—Ç—å"]:
                self.send_message(
                    user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VK Education. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö."
                )
                return

            if not text:
                self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
                return

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
            corrected_text = correct_spelling(text)
            logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {corrected_text}")

            # –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            from db import (
                is_vke_related,
                is_list_request,
                get_top_context,
                search_knowledge,
                generate_help_link,
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
            yes_no_triggers = [
                "–≤–æ–∑–º–æ–∂–Ω–æ –ª–∏",
                "–º–æ–∂–Ω–æ –ª–∏",
                "–Ω–µ–ª—å–∑—è –ª–∏",
                "–∏–º–µ—é –ª–∏ –ø—Ä–∞–≤–æ",
                "–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏",
            ]
            is_binary = any(
                trigger in corrected_text.lower() for trigger in yes_no_triggers
            )
            is_list = is_list_request(corrected_text)
            external = not is_vke_related(corrected_text)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if is_list:
                for audience in [
                    "—à–∫–æ–ª—å–Ω–∏–∫",
                    "—Å—Ç—É–¥–µ–Ω—Ç",
                    "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                    "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
                    "–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç",
                    "—É—á–∞—â–∏–π—Å—è",
                    "–≤—ã–ø—É—Å–∫–Ω–∏–∫",
                ]:
                    if audience in corrected_text:
                        from db import list_projects_for_audience

                        answer = list_projects_for_audience(audience)
                        self.send_message(user_id, answer)
                        return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = get_top_context(corrected_text, k=6 if is_list else 3)

            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            answer = search_knowledge(corrected_text)

            if answer and "–Ø –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞" not in answer:
                help_link = generate_help_link(corrected_text)
                full_reply = f"{answer}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {help_link}"
                self.send_message(user_id, full_reply)
            else:
                try:
                    gpt_answer = ask_gigachat(
                        user_question=corrected_text,
                        context_text=context,
                        external=external,
                        is_binary=is_binary,
                        is_list=is_list,
                    )

                    if (
                        "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç" in gpt_answer.lower()
                        or "–Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å" in gpt_answer.lower()
                    ):
                        gpt_answer += "\n\n‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ VK Education: https://education.vk.company/"
                    else:
                        link = generate_help_link(corrected_text)
                        gpt_answer += f"\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"

                except Exception as e:
                    logger.error(f"GigaChat API Error: {e}")
                    gpt_answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat."

                self.send_message(user_id, gpt_answer)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    def run(self):
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                self.handle_message(event)


if __name__ == "__main__":
    bot = VkBot()
    bot.run()
